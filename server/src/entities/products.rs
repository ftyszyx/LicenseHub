//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, ToSchema)]
#[sea_orm(table_name = "products")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub price: i32,
    pub category_id: i32,
    pub image_url: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub tags: Option<Json>,
    pub sort_order: i32,
    pub status: i16,
    pub delivery_mode: i16,
    #[schema(value_type = String)]
    pub created_at: Option<DateTimeWithTimeZone>,
    #[schema(value_type = String)]
    pub updated_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::product_categories::Entity",
        from = "Column::CategoryId",
        to = "super::product_categories::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ProductCategories,
    #[sea_orm(has_many = "super::reg_codes::Entity")]
    RegCodes,
}

impl Related<super::product_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductCategories.def()
    }
}

impl Related<super::reg_codes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RegCodes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
