//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, ToSchema)]
#[sea_orm(table_name = "orders")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub order_sn: String,
    pub user_id: i32,
    pub status: i16,
    #[sea_orm(column_type = "JsonBinary")]
    pub product_info: Json,
    pub payment_method: Option<String>,
    #[schema(value_type = f64)]
    pub original_price: f64,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub coupon_info: Option<Json>,
    #[schema(value_type = f64)]
    pub final_price: f64,
    #[sea_orm(column_type = "Text", nullable)]
    pub remark: Option<String>,
    #[schema(value_type = String)]
    pub transaction_time: Option<DateTimeWithTimeZone>,
    #[schema(value_type = String)]
    pub created_at: DateTimeWithTimeZone,
    #[schema(value_type = String)]
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
    #[sea_orm(has_many = "super::reg_codes::Entity")]
    RegCodes,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::reg_codes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RegCodes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
