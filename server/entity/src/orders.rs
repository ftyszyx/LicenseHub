//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::Serialize;
use utoipa::ToSchema;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel,ToSchema,Serialize)]
#[sea_orm(table_name = "orders")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub order_id: String,
    pub user_info: Option<Json>,
    pub status: i16,
    pub pay_method_id: i32,
    pub original_price: i64,
    pub final_price: i64,
    pub remark: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub created_by: i32,
    pub updated_by: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::pay_methods::Entity",
        from = "Column::PayMethodId",
        to = "super::pay_methods::Column::Id"
    )]
    PayMethods,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::CreatedBy",
        to = "super::users::Column::Id"
    )]
    CreatedByUser,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UpdatedBy",
        to = "super::users::Column::Id"
    )]
    UpdatedByUser,
    #[sea_orm(has_many = "super::order_products::Entity")]
    OrderProducts,
    #[sea_orm(has_many = "super::order_coupons::Entity")]
    OrderCoupons,
    #[sea_orm(has_many = "super::order_reg_codes::Entity")]
    OrderRegCodes,
}

impl Related<super::pay_methods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PayMethods.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CreatedByUser.def()
    }
}

impl Related<super::order_products::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderProducts.def()
    }
}

impl Related<super::order_coupons::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderCoupons.def()
    }
}

impl Related<super::order_reg_codes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderRegCodes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
