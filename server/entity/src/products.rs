//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, serde::Serialize, utoipa::ToSchema)]
#[sea_orm(table_name = "products")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub price: i32,
    pub app_id: i32,
    pub product_id: String,
    pub add_valid_days: i32,
    pub image_url: Option<String>,
    pub tags: Option<String>,
    pub status: i16,
    #[serde(with = "chrono::serde::ts_seconds_option")]
    #[schema(example = "2025-07-18T00:00:00+08:00")]
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(with = "chrono::serde::ts_seconds_option")]
    #[schema(example = "2025-07-18T00:00:00+08:00")]
    pub updated_at: Option<chrono::DateTime<chrono::Utc>>,
    pub remark: Option<String>,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::apps::Entity",
        from = "Column::AppId",
        to = "super::apps::Column::Id"
    )]
    Apps,
    #[sea_orm(has_many = "super::order_products::Entity")]
    OrderProducts,
    #[sea_orm(has_many = "super::coupons_products::Entity")]
    CouponsProducts,
}

impl Related<super::apps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Apps.def()
    }
}

impl Related<super::order_products::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderProducts.def()
    }
}

impl Related<super::coupons_products::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CouponsProducts.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
